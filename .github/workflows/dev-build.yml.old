# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build

on:
  push:
    branches: [ "main" ]
    paths:
      - code/**

env:
  PROJECT_ID: akiva-sandbox
  GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry
#  GKE_CLUSTER: cluster-1    # TODO: update to cluster name
#  GKE_ZONE: us-central1-c   # TODO: update to cluster zone
#  DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
  REPOSITORY: hello-repo # TODO: update to Artifact Registry docker repository
  IMAGE: hello-app

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: development

    defaults:
      run:
        working-directory: code/

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Configure Workload Identity Federation and generate an access token.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0.4.0'
      with:
        credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

    -
      name: Login to GAR
      uses: docker/login-action@v3
      with:
        registry: "us-central1-docker.pkg.dev"
        username: "_json_key"
        password: "${{ secrets.GOOGLE_CREDENTIALS }}"

#    - name: Docker configuration
#      run: |-
#        echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
    # Get the GKE credentials so we can deploy to the cluster
#    - name: Set up GKE credentials
#      uses: google-github-actions/get-gke-credentials@v0
#      with:
#        cluster_name: ${{ env.GKE_CLUSTER }}
#        location: ${{ env.GKE_ZONE }}

    # Build the Docker image
    - name: Build
      run: |-
        docker buildx build \
          --platform linux/amd64 \
          --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
          --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"

    - name: Publish
      run: |-
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest"
